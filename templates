;; -*- mode: lisp -*-
	;;; Commentary
;;
;; Organize this file by mode then by abbreviation.  Multi-modes have their own
;; section

;;; Single Mode Entries

;;;; emacs-lisp
emacs-lisp-mode

(autoload ";;;###autoload")
(pt "(point)")
(lambda "(lambda (" p ")" n> r> ")")
(var "(defvar " p "\n  \"" p "\")")
(local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(alias "(defalias '" p " '" p ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(iflet "(if-let (" p ")" n> r> ")")
(whenlet "(when-let (" p ")" n> r> ")")
(iflet* "(if-let* (" p ")" n> r> ")")
(whenlet* "(when-let* (" p ")" n> r> ")")
(andlet* "(and-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " (p "scrutinee") n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(let* "(let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(advice "(defun " (p "adv" name) " (&rest app)" n> p n> "(apply app))" n>
	"(advice-add #'" (p "fun") " " (p ":around") " #'" (s name) ")")
(package ";;; " (file-name-base (or (buffer-file-name) (buffer-name))) " --- " p " -*- lexical-binding: t -*-"
	 n n
	 ";; Copyright (C) " (format-time-string "%Y") " Jeremy Friesen" n
	 ";; Author: Jeremy Friesen <jeremy@jeremyfriesen.com>" n n
	 ";; This file is NOT part of GNU Emacs." n
	 ";;; Commentary" n p n
	 ";;; Code" n p n
	 "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
	 ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name))) " ends here" n)

;;;; fundamental-mode
fundamental-mode

(today (format-time-string "%Y-%m-%d"))

;;;; markdown-mode
markdown-mode markdown-ts-mode

(tor "[Take on Rules](https://takeonrules.com)")

;;;; org-mode
org-mode

(local-var "# -*- " (p "Variable name: ")": " (p "Value: ") "; -*-")
(@person (p (jf/denote/link--people)))
;; Blockquote structure for Emacs
(blockquote_block "#+attr_shortcode:"
  (p "Author (e.g. \"pre\" keyword): " pre t) (unless (s-blank? pre) (concat " :pre " pre))
  (p "Cite: " cite t) (unless (s-blank? cite) (concat " :cite " cite))
  (p "Cite URL: " cite_url t) (unless (s-blank? cite_url) (concat " :cite_url " cite_url))
  n "#+begin_blockquote"
  n q
  n "#+end_blockquote" n)
(cite "{{{cite(" (p (completing-read "Cite: " (jf/org-macro-value-list "cite"))) ")}}}")
(keyboard "{{{kbd(" (p (completing-read "Keyboard: " (jf/org-macro-value-list "kbd"))) ")}}}")
(idiomatic "{{{i(" (p (completing-read "Idiom: " (jf/org-macro-value-list "i"))) ")}}}")
(today "[[date:" (format-time-string "%Y-%m-%d") "][today]]")
(Today "[[date:" (format-time-string "%Y-%m-%d") "][Today]]")
(tor "[[https://takeonrules.com][Take on Rules]]")
(proj n "#+PROJECT_NAME: " (p "Project Name: " project-name)
	 n "#+PROJECT_PATHS: (\"Notes, " (s project-name) "\" . \"" (buffer-file-name)  "\")")

(update_block "#+attr_shortcode: :date " (format-time-string "%Y-%m-%d")
	" :mode " (p (completing-read "Mode: " '(inline paragraph marginnote sidenote section fallback) nil t) mode)
    n "#+begin_update"
    n q
    n "#+end_update" n)

;;;;; Consider "The One Ring" minor mode to inject these.
(rune "{{{rune(" (completing-read "Rune: " jf/gaming/runes) ")}}}")
(asl "As {{{i(Loremaster)}}}, ")

;;;; text-mode
text-mode

;; This is an example of using the value of `(s str)' to populate the above and
;; below line!
(asciibox "+-" (make-string (length str) ?-) "-+" n
	  "| " (s str)                       " |" n
	  "+-" (make-string (length str) ?-) "-+" n)

(banner comment-start (make-string (length title) ?=) n comment-start (p "Title: " title) n comment-start (make-string (length title) ?=))

;;;; web-mode
web-mode
(bye "<% byebug %>" n)
(db "<% require \"debug\"; binding.break %>" n)
(tor "<cite><a href=\"https://takeonrules.com\">Take on Rules</a></cite>")
(today "<time datetime=\"" (format-time-string "%Y-%m-%d") "\">today</time>")

;;; Multi-Mode Entries

;;;; enh-ruby-mode ruby-mode
enh-ruby-mode ruby-mode rspec-mode ruby-ts-mode

(bench "require \"benchmark\"" n "Benchmark.bmbm do |b|" n "  b.report(\"\") do" n "    # Stuff" n "  end" n "end")
(db "require \"debug\"; binding.break" n)
(bye "byebug" n)
(frozen "# frozen_string_literal: true")
(shell "#!/usr/bin/env ruby -w")
(dc "described_class")
(desc "# frozen_string_literal: true" n n "require 'spec_helper'" n n "RSpec.describe " q " do" n n "end")
(subject "subject(:" p ") { " p " }")
;; A little experiment in mixing tempel behavior and multiple values.
(init (p "Parameters (comma separated): " given-params t)
      (let* ((params (mapcar #'s-trim (s-split "," given-params)))
	     (kwargs (mapcar (lambda (el) (concat el ":")) params))
	     (symbols (mapcar (lambda (el) (concat ":" el)) params)))
	(dolist (param params) (insert "# @param " param " [Object]\n"))
	(insert "def initialize(" (s-join ", " kwargs) ")\n")
	(dolist (param params) (insert "  self." param " = " param "\n"))
	(insert "end\n\n"
		"attr_accessor " (s-join ", " symbols) "\n"
		"private " (s-join ", " symbols) "\n"
		"private " (s-join "=, " symbols) "=\n")))

(it_is "it { is_expected.to " q " }")
