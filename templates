;; -*- mode: lisp -*-
;;; Commentary
;;
;; Organize this file by mode then by abbreviation.  Multi-modes have their own
;; section

;;; Single Mode Entries

;;;; emacs-lisp
emacs-lisp-mode

(lambda "(lambda (" p ")" n> r> ")")

;;;; fundamental-mode
fundamental-mode

(today (format-time-string "%Y-%m-%d"))

;;;; org-mode
org-mode

(idiomatic "{{{i(" (p (completing-read "Idiom: " (jf/org-macro-value-list "i"))) ")}}}")
(shell "#+begin_src bash :results scalar replace :exports both :tangle yes" n> q n> "#+end_src" n>)
(today "[[date:" (format-time-string "%Y-%m-%d") "][today]]")
(tor "[[https://takeonrules.com][Take on Rules]]")
(uml "#+begin_src plantuml" n> "@startuml" n> "!theme amiga" n> q n> "@enduml" n> "#+end_src" n>)

;;;; text-mode
text-mode

;; This is an example of using the value of `(s str)' to populate the above and
;; below line!
(asciibox "+-" (make-string (length str) ?-) "-+" n
          "| " (s str)                       " |" n
          "+-" (make-string (length str) ?-) "-+" n)

;;;; web-mode
web-mode

(db "<% require \"debug\"; binding.break %>" n)
(tor "<cite><a href=\"https://takeonrules.com\">Take on Rules</a></cite>")
(today "<time datetime=\"" (format-time-string "%Y-%m-%d") "\">today</time>")

;;; Multi-Mode Entries

;;;; enh-ruby-mode ruby-mode
enh-ruby-mode ruby-mode rspec-mode

(bench "require \"benchmark\"" n "Benchmark.bmbm do |b|" n "  b.report(\"\") do" n "    # Stuff" n "  end" n "end")
(db "require \"debug\"; binding.break" n)
(frozen "# frozen_string_literal: true")
(shell "#!/usr/bin/env ruby -w")
(dc "described_class")
(desc (when (rspec-top-level-desc-p) "RSpec.") "describe " q " do" n> n "end")

;; # -*- mode: snippet -*-
;; # name: describe Class do ... end
;; # expand-env: ((top-level (rspec-top-level-desc-p)) (global-dsl rspec-expose-dsl-globally) (maybe-quote (unless top-level "\"")))
;; # --
;; `(and top-level (not global-dsl) "RSpec.")`describe `maybe-quote`${1:`(and top-level (rspec-class-from-file-name))`}`maybe-quote` do
;;   $0
;; end