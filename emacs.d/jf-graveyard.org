Welcome to the graveyard; I'm not ready to fully say good-bye, but these are not part of my required code.

** My Collection of Org Roam interactions
:PROPERTIES:
:ID:       C5FFA2DD-B321-4579-8D85-6F50C854A1EF
:END:

The =node-id= below is an [[denote:20221009T115044][Org-Roam]] node, something Iâ€™ve moved away from in favor of Denote.  My reason for keeping this is a reminder of the =seq-mapcat= function.

#+begin_src emacs-lisp
(defun jf/blockquote-hugo (node-id)
  "Export the blockquote for the given NODE-ID"
  (let ((data (jf/org-mode-extract-body-and-properties node-id)))
    (concat
     "\n{{{< blockquote " (jf/hugo-blockquote-attributes-for (plist-get data :properties)) ">}}}\n"
     (format "%s" (plist-get data :body))
     "\n{{{< /blockquote >}}}\n")))

(defun jf/hugo-blockquote-attributes-for (properties)
  "Map the PROPERTIES to attributes."
  (seq-mapcat (lambda (element)
    (let ((key (car element))
          (text (cadr element)))
      (pcase key
        ("ID" (format "orgId=\"%s\" " text))
        ("TITLE" (format "cite=\"%s\" " text))
        ("CITE_URL" (format "citeUrl=\"%s\" " text))
        ("AUTHOR" (format "pre=\"%s\" " text))
        ("CITE_POST" (format "post=\"%s\" " text))
        (_ ""))))
        properties))
#+end_src

Related are the following commands:

#+begin_src emacs_lisp
(cl-defun jf/org-mode-extract-body-and-properties (node-id)
  "Extract quotable body and properties from NODE-ID."
  (with-current-buffer (find-file-noselect (org-id-find-id-file node-id))
    (list :properties (org-element-map (org-element-parse-buffer 'object)
        '(keyword node-property)
      #'jf/org-mode-get-keyword-key-value)
    :body (jf/org-mode-extract-body-from-current-buffer))))


(defun jf/org-mode-extract-body-from-current-buffer ()
  "Extract the body from the current org-mode body"
  (buffer-substring (save-excursion
          (jf/org-mode-find-point-that-starts-body t)
          (point))
        (org-entry-end-position)))

(defun jf/org-mode-find-point-that-starts-body (&optional unsafe)
  "Skip headline, planning line, and all drawers in current entry.
    If UNSAFE is non-nil, assume point is on headline."
  (unless unsafe
    ;; To improve performance in loops (e.g. with `org-map-entries')
    (org-back-to-heading))
  (cl-loop for element = (org-element-at-point)
     for pos = (pcase element
           (`(headline . ,_) (org-element-property :contents-begin element))
           (`(,(or 'planning 'property-drawer 'node-property 'keyword 'drawer) . ,_) (org-element-property :end element)))
     while pos
     do (goto-char pos)))
#+end_src

** Logic for Parsing My Local Post
:PROPERTIES:
:ID:       60E9FC3A-9E31-4D02-B67D-11897671905E
:END:

#+begin_src emacs-lisp
  (cl-defun jf/tor-view-blog-post (&key
                                    (hostname jf/tor-hostname-current))
    "Browse the url for the HOSTNAME

      The front matter of blog posts contains YAML, with two
      attributes: slug and date.  Based on the site configuration, the
      URLs for one of those posts is: hostname/year/month/day/slug"
    (interactive)
    (let ((slugs))
      (save-excursion
        ;; Remember we are making a list and pushing to the beginning of
        ;; the list.  Hence we start with the last slug in mind.
        (goto-char 1)
        (re-search-forward "^slug: \\(.*\\)$" nil t)
        (push (match-string 1) slugs)
        (goto-char 1)
        (re-search-forward
          "^date: \\([[:digit:]]+\\)-\\([[:digit:]]+\\)-\\([[:digit:]]+\\) "
          nil t)
        ;; Then move to day, month, then year.
        (push (match-string 3) slugs)
        (push (match-string 2) slugs)
        (push (match-string 1) slugs)
        ;; And finally the host name.
        (push hostname slugs))
      (browse-url (format "%s" (s-join "/" slugs)))))
#+end_src

** Finding Draft File
:PROPERTIES:
:ID:       F57621D5-9C92-47FD-8B28-B29300D82D29
:END:

#+begin_src emacs-lisp
  (defun jf/tor-find-file-draft (filename)
    "Find a draft FILENAME in the TakeOnRules content directory."
    (interactive
      (list (jf/find-file-via-matching
              :prompt "Draft filename: "
              :matching "^draft: true"
              :in (f-join jf/tor-home-directory "content"))))
    (find-file filename))
#+end_src

** Automation Now Favored By Denote
:PROPERTIES:
:ID:       E61F385C-8B0B-44A1-893A-7E3457B95CD4
:END:

A massive function for helping make the preliminaries of a blog post.

#+begin_src emacs-lisp
  (cl-defun jf/tor-post---create-or-append (&key
                                             title subheading
                                             (tags '("null")) series toc
                                             citeTitle citeURL citeAuthor)
    "Create or append a post with TITLE.

      The following keys are optional:

      :SUBHEADING if you have an active region, use this header.
      :TAGS one or more tags, as a list or string, to add to the
        frontmatter.
      :SERIES the series to set in the frontmatter.
      :TOC whether to include a table of contents in the post.
      :CITETITLE the title of the URL cited (if any)
      :CITEURL the URL cited (if any)
      :CITEAUTHOR the author cited (if any)

      If there's an active region, select that text and place it."
    (let* ((default-directory (f-join jf/tor-home-directory
                                "content" "posts"
                                (format-time-string "%Y/")))

            (slug (denote-sluggify title))
            (fpath (expand-file-name
                     (concat default-directory slug ".md"))))
      ;; If the file does not exist, create the file with the proper
      ;; frontmatter.
      (if (not (file-exists-p fpath))
        (write-region
          (concat "---"
            "\ndate: " (format-time-string "%Y-%m-%d %H:%M:%S %z")
            "\ndraft: true"
            "\nlayout: post"
            "\nlicenses:\n- all-rights-reserved"
            "\nslug: " (format "%s" slug)
            "\ntitle: '" (jf/tor-convert-text-to-post-title title) "'"
            "\ntype: post"
            (when series (concat "\nseries: " series))
            (when toc (concat "\ntoc: true"))
            "\ntags:"
            (if tags
              (concat (mapconcat
                        (lambda (tag) (concat "\n- " tag))
                        (flatten-tree tags) ""))
              "\n- null")
            "\n---\n")
          nil fpath))
      ;; If we have an active region, append that region's content to
      ;; the given file.
      (if (use-region-p)
        (write-region
          (concat
            (if subheading
              (concat "\n## " subheading "\n")
              (when citeTitle (concat "\n## " citeTitle "\n")))
            (when citeURL (concat
                            "\n{{< blockquote"
                            (when citeAuthor
                              (concat " pre=\"" citeAuthor "\""))
                            " cite=\"" citeTitle
                            "\" cite_url=\"" citeURL "\" >}}\n"))
            (buffer-substring (region-beginning) (region-end))
            (when citeURL "\n{{< /blockquote >}}"))
          nil fpath t)
        ;; Without an active region, if we have a citeURL insert a link
        ;; to it.
        (when citeURL
          (write-region
            (concat
              "\n<cite><a href=\"" citeURL
              "\" class=\"u-url p-name\" rel=\"cite\">"
              (or (citeTitle) (citeURL)) "</a></cite>\n")
            nil fpath t)))
      ;; Finally open that file for editing.
      (find-file fpath)
      (end-of-buffer)))
#+end_src


** Some Org Roam Note Exporting
:PROPERTIES:
:ID:       92361757-90E8-4053-81BA-AF2C1BD21340
:END:

#+begin_src emacs-lisp
  (cl-defun jf/org-markdown-export-format-link-for (&key node desc)
    "Return a \"link\" text based on the given NODE and DESC.

    This relates to my glossary.html Hugo short-code."
    (when-let (url (jf/org-roam-external-url-for :node node))
      (let ((key (jf/org-roam-node-get-org-mode-property :node node :property "GLOSSARY_KEY")))
        (cond
         ((jf/org-roam-node-get-org-mode-property :node node :property "OFFER")
          (format "{{< glossary key=\"%s\" >}}" key))
         ((jf/org-roam-node-get-org-mode-property :node node :property "SAME_AS")
          (format "{{< glossary key=\"%s\" link=\"sameAs\" >}}" key))
         (t (format "[%s](%s)" desc url))))))

    ;;; For testing:
  ;;
  ;; (message "%s" (jf/org-markdown-export-format-link-for :node (org-roam-node-from-id "FC017488-D8EC-43DE-A35D-4D10A87B6A0D") :desc "Burning Wheel Gold"))
  ;; (message "%s" (jf/org-markdown-export-format-link-for :node (org-roam-node-from-id "86F3E44F-AA0E-4B08-B0D8-30A764B4CD13") :desc "Org Roam"))
#+end_src
