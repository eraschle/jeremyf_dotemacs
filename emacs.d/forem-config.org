# -*- org-insert-tilde-language: emacs-lisp; -*-
#+TITLE: Forem Configuration
#+AUTHOR: Jeremy Friesen
#+EMAIL: jeremy@jeremyfriesen.com
#+STARTUP: showall
#+OPTIONS: toc:3
#+PROPERTY: header-args:emacs-lisp :comments link

On <2021-10-04 Mon> I started working at [[https://forem.com][Forem]].  My role involves software
development and managing people.  I use Emacs to provide some of that
automation.

* Forem Minor Mode

Before I go too far I want to make sure I have a minor mode for Forem.  Here, I
use the ~jf/minor-mode-maker~ macro.

#+begin_src emacs-lisp
  (jf/minor-mode-maker :title "Forem" :abbr "forem")
#+end_src

In my “forem” oriented repositories, I have the following ~.dir-locals.el~
file:

#+begin_example
  ;;; Directory Local Variables
  ;;; For more information see (info "(emacs) Directory Variables")

  (
   (prog-mode . ((jf/forem-minor-mode . 1)))
   (text-mode . ((jf/forem-minor-mode . 1)))
  )
#+end_example

This provides me with a mechanism for hiding or showing specific things in my
Forem Menu.  Further, it keeps my mind open to considering additional modes.

For example, we have multiple repositories at Forem.  Some are documenation
oriented.  The “menu” for a documentation repository might be very different
from the menu for a “code” repository.  Again, opening my thinking to
possibilities and holding them lightly.

* Further Automation

** Create a branch from a Github Issue

I want a function that I can call which will walk me through the predictable
and safe creation of a branch.

My goal is to have the branch name adhear to the following convention:

- :githubUserName/issue---:owner/:repo#:number

Why do this?  First, I want to “entice” myself to use Issue tracking.  This is
good collaborative form.  Second, with a predictable branch name, I can later
use Emacs to jump to the corresponding issue.

*** Two Approaches

I can provide a URL/slug or leverage an already open browser.  The URL/slug
approach might require authentication and token management.  That’s
troublesome.  The browser path requires that I have an integration with my
browser; but I won’t need to manage authentication issues, so let’s explore that.

Let’s use the ~grab-mac-link~ package.  I’m certain I’m already including this
in my [[file:configuration.org][Emacs Configuration]] file, I’m “using” it again, so I’m going to ensure I
have what I want.

#+begin_src emacs-lisp
  (use-package grab-mac-link
    :straight t
    :commands (grab-mac-link-safari-1))
#+end_src

*** Implementation

As I think through my approach, I have two concerns, an interactive function to
gather the data and a function for using that data to manipulate the git
repository.

- ~jf/git-branch-create-from-safari~ :: This is the function that gathers the
  data.  It’s responsible for prompting for the correct project, verifying that
  Safari’s URL is correct, and then calling the non-interactive function
  ~jf/git-branch-create~.

#+begin_src emacs-lisp
  (defun jf/git-branch-create-from-safari (directory)
    "Create a git branch in project DIRECTORY from Safari url."
    (interactive (list (projectile-completing-read
			"Project name: "
			projectile-known-projects)))
    (catch 'not-a-github-repository
      (let* ((link-title-pair (grab-mac-link-safari-1))
	     (url (car link-title-pair))
	     (title (cadr link-title-pair))
	     (suffix (jf/github-abbreviation-for :url url))
	     (slugified-title "issue")
	     (prefix (format "%s/%s" jf/github-username slugified-title))
	     (branch-name (concat prefix "---" suffix)))
	(message (jf/git-branch-create :branch-name branch-name :directory directory)))))
#+end_src

#+begin_src emacs-lisp
  (cl-defun jf/github-abbreviation-for (&key url)
    "Convert the URL to a github abbreviation"
    (unless (string-match "^https://github\\.com/[^/]+/[^/]+/\\(issues\\|pull\\)/[[:digit:]]+" url)
      (throw 'not-a-github-repository (message "Expected URL \"%s\" to be a Github Issue or Pull URL." url)))
    (let ((slugs (split-string url "/")))
      (format  "%s/%s#%s" (nth 3 slugs) (nth 4 slugs) (nth 6 slugs))))
#+end_src

#+RESULTS:
: jf/github-abbreviation-for

- ~jf/git-branch-create~ :: This function manipulates the git repository.  We
  have a valid (enough) directory and a new branch-name, now let’s do the file
  system work to ensure we can safely do this work.

#+begin_src emacs-lisp
  (cl-defun jf/git-branch-create (&key branch-name directory (starting-branch "main"))
    "Create BRANCH-NAME from STARTING-BRANCH in DIRECTORY.  Ensure clean state."
    (catch 'dirty-branch
      (let* ((default-directory directory))
	(unless (eq 0 (length (shell-command-to-string "git status --porcelain")))
	  (throw 'dirty-branch
		 (format
		  "Repository \"%s\" is dirty repository."
		  default-directory)))

	(magit-branch-checkout starting-branch)

	(magit-pull-from-upstream "--rebase")

	(unless (eq 0 (length (shell-command-to-string "git status --porcelain")))
	  (throw 'dirty-branch
		 (format
		  "After updating from remote, repository \"%s\" is dirty repository."
		  default-directory)))

	(magit-branch-create branch-name starting-branch)
	(magit-branch-checkout branch-name))
      (format "Created branch on %s" directory)))
#+end_src

This gets me what I want, and helps frame the next exercise (e.g. “For the
current branch, open the corresponding issue in the browser”).  It also has me
thinking that I might want to inject into my commit message a “References
#:number” line.  That sounds like another function.

#+begin_src emacs-lisp
  (cl-defun jf/git-github-issue-short-ref (parg &key (url-template "https://github.com/%s/issues/%s" ))
    "This function will parse the current branch and open the Github issue.

  With no universal PARG, browse to the associated github issue.
  With universal PARG, insert github short ref.

  Regardless, add the github short ref to the kill ring.

  Plays nicely with `jf/git-branch-create'"
    (interactive "P")
    (let* ((prefix (car parg))
	   (branch (magit-get-current-branch))
	   (gh-short-ref (cadr (s-split "---" branch)))
	   (parts (s-split "#" gh-short-ref))
	   (repo (car parts))
	   (number (cadr parts))
	   (url (format url-template repo number)))
      (kill-new gh-short-ref)
      (message "\"%s\" added to kill-ring" gh-short-ref)
      (if (not prefix)
	  (browse-url url)
	(insert gh-short-ref))))
#+end_src


** Tidying a Pull Request

At [[https://forem.com][Forem]] we use a [[https://github.com/forem/forem/blob/main/.github/PULL_REQUEST_TEMPLATE.md][pull request template]] that has lots of instructions for
contributors to complete.  The ~jf/forem-tidy-pull-request~ function takes the
initial contents (which include the commit message of the first commit of the
pull request) and tidies it up so I can fill out the primary fields.

#+begin_src emacs-lisp
  (defun jf/forem-tidy-pull-request ()
    "Perform some quick tidying of the Forem PR template."
    (interactive)
    ;; Start from the beginning.
    (beginning-of-buffer)

    ;; The text before the first HTML/Markdown
    ;; comments is the commit message.  Cut that
    ;; text…
    (search-forward "<!--")
    (kill-region 1 (- (point) 4))

    ;; ...and paste it inside the description
    ;; section.
    (replace-string
     "## Description\n\n"
     (concat "## Description\n\n"
	     (format "%s" (car kill-ring))))

    ;; We've moved point (e.g., the cursor) so let's
    ;; jump back to the beginning of the buffer.
    (beginning-of-buffer)

    ;; Remove HTML/Markdown comments
    (replace-regexp
     "\\(\n\\)*<!--\\(.\\|\n\\)+?-->\\(\n\\)*"
     "\n")

    (beginning-of-buffer)

    ;; Clear out the text I almost always delete.
    ;;
    ;; This clears out the two or three line "please"!
    (replace-regexp ": _please.*\\(\n +.+\\)+_\n" ":\n")

    (beginning-of-buffer)

    ;; Clear out some comments.
    (replace-regexp "^\n_\\(If\\|Please\\|Will\\).*\\(\n.+\\)+_\n+" "\n")

    ;; Clean out the GIF section.  As much as I try
    ;; I just don't like adding GIFs to PRs
    (replace-regexp
     "\n## \\[optional\\] What gif\\(.\\)*\n+\\!.*"
     "")

    ;; Jump to the beginning of the buffer...again.
    (beginning-of-buffer))
#+end_src

The above took me about 2 hours to write, but as of <2022-02-12 Sat> I’ve
written and merged 94 pull requests using this tidy function.

#+begin_src shell-script
  cd ~/git/forem ; git shortlog -se --since=2021-11-24 | rg "Jeremy Friesen"
#+end_src

Each time I use the tidy function, I save about a minute, reduce points for
decision making, and more consistently clear out the clutter to answer the
specific questions in the checklist.  In other words, this function helps me
stay focused on the task of writing a meaningful commit message.

** Forem End of Week Status Update

The following ~emacs-lisp~ creates a buffer, from an existing template, to help kick off writing my end of week status reports.

#+begin_src emacs-lisp -n
  (defvar jf/forem-eow-template
    "~/git/forem-internal-eng/.github/epic-progress-update.md"
    "The location of the template to use for end of week reporting.")

  (cl-defun jf/forem-prepare-end-of-week-status-update (&key (template jf/forem-eow-template))
    "Create a buffer for writing up an Engineering End of Week Status Update."
    (interactive)
    (let* ((body (with-temp-buffer
		  (insert-file-contents template)
		  (buffer-string)))
	   (eow-buffer (get-buffer-create "*Forem EoW Update*")))
      (switch-to-buffer eow-buffer)
      (erase-buffer)
      (markdown-mode)
      (hammerspoon-edit-minor-mode)
      (insert body)
      (beginning-of-buffer)
      (kill-line)
      (insert (concat "## " (format-time-string "%Y-%m-%d")))))
#+end_src

The above is an example of automating a task.

* Dashboard - A Partially Deprecated Function

When I first started at Forem, I had to track a lot of URLs.  And with
[[https://en.wikipedia.org/wiki/Gnolia][ma.gnolia]]’s demise, I never invested heavily in browser nor SaaS-based
bookmarking.  So, with Emacs in-hand, I whipped up a quick dashboard function.

I don’t use it much, but keep it around as a reference implementation of
~ripgrep~ and ~xargs~; I have long learned that it’s a good idea to tuck away
snippets for future reference.  Especially if I take time to document and
describe them.

#+begin_src emacs-lisp
  (defconst jf/forem-dashboard-filename
    "~/git/org/forem-dashboard.org"
    "The file to the dashboard documentation and links for Forem.")

  (cl-defun jf/open-dashboard (&key (filename jf/forem-dashboard-filename))
    "For the given FILENAME open the links in the default browser.

      With the universal prefix (e.g. C-u) open the file instead."
    (interactive)
    (if (equal current-prefix-arg nil) ; no C-u
	(call-process-shell-command
	 (concat "rg \"\\[\\[(.*)\\]\\[\" "
		 filename
		 " --only-matching"
		 " | rg \"[^\\[|\\]]+\" --only-matching"
		 " | xargs open"))
      (find-file filename)))
#+end_src

As I look at this Dashboard with fresh eyes, I think I may move this concept to
my ~indesk~ framing; See [[file:configuration.org][Configuration.org]] for details.

* Forem Menu

Next is my Forem menu; these are the functions to help me navigate various
aspects of my work. As of <2022-02-12 Sat>, I have a “Browse Authorization
System Project 46” in my menu.  When the project ends, I’ll remove that line.

#+begin_src emacs-lisp
  ;; Doing just a bit of hygiene.
  (use-package transient :straight t)

  (global-set-key (kbd "C-M-s-f") 'jf/menu--forem)
  (transient-define-prefix jf/menu--forem ()
    "Menu of Forem related functions."
    [
     ["Forem's Workflow"
      ("i" "All issues…" (lambda () (interactive) (browse-url "https://github.com/forem/forem/issues/")))
      ("I" "My assigned issues…" (lambda () (interactive) (browse-url "https://github.com/forem/forem/issues/assigned/jeremyf")))
      ("M-i" "My created and open issues" (lambda () (interactive) (browse-url "https://github.com/forem/forem/issues/created_by/@me")))
      ""
      ("m" "Browse [m]erged Pull Requests…" (lambda () (interactive) (browse-url "https://github.com/forem/forem/pulls?q=is%3Apr+is%3Aclosed")))
      ("M" "Browse Jeremy's [M]erged Pull Requests…" (lambda () (interactive) (browse-url "https://github.com/forem/forem/pulls/jeremyf?q=is%3Apr+is%3Aclosed")))
      ("p" "Browse to pull requests…" (lambda () (interactive) (browse-url "https://github.com/forem/forem/pulls/")))
      ("P" "Browse to Jeremy's [P]ull requests…" (lambda () (interactive) (browse-url "https://github.com/forem/forem/pulls/jeremyf")))
      ("r" "Release runbook in Forem.team" (lambda () (interactive) (browse-url "https://forem.team/product/feature-release-communications-playbook-11h2")))
      ("s" "DEV.to SLO Dashboard" (lambda () (interactive) (browse-url "https://app.datadoghq.com/dashboard/hk3-xvy-xj9/dev-slo-dashboard?from_ts=1653655087682&to_ts=1653658687682&live=true")))
      ("n" "Browse Github [N]otifications" (lambda () (interactive) (browse-url "https://github.com/notifications")))
      ]
     ["Jeremy's Projects"
      ("j a" "Jump to A/B Experiments" (lambda () (interactive) (browse-url "https://dev.to/admin/abtests")))
      ("j b" "Jump to Blazer" (lambda () (interactive) (browse-url "https://dev.to/admin/blazer")))
      ("j e" "Browse Epics Assigned to Jeremy" (lambda () (interactive) (browse-url "https://github.com/forem/forem-internal-eng/issues/assigned/jeremyf")))
      ("j f" "Feed Experiment Tracking Issues" (lambda () (interactive) (browse-url "https://github.com/forem/forem-internal-eng/issues/453")))
      ("j m" "Moderator/Moderation Tracking Issues" (lambda () (interactive) (browse-url "https://github.com/forem/forem-internal-eng/issues/445")))
      ("j c" "Create Moderator Role and Enable Features #58" (lambda () (interactive) (browse-url "https://github.com/orgs/forem/projects/58/views/1")))
      ("J" "Browse to Content Experience pro[J]ects…" (lambda () (interactive) (browse-url "https://github.com/orgs/forem/projects/39")))
      ""
      "Org-Mode"
      ("D" "[D]ashboard open…" jf/open-dashboard)
      ("d" "Visit [d]ashboard file…" (lambda () (interactive) (find-file jf/forem-dashboard-filename)))
      ("C-f" "Go to the Forem config file." (lambda () (interactive) (find-file "~/git/dotemacs/emacs.d/forem-config.org")))
      ]
     ["Transformations"
      ("C-e" "End of week status report template" jf/forem-prepare-end-of-week-status-update)
      ("C-p" "Tidy pull request" jf/forem-tidy-pull-request :if-non-nil hammerspoon-edit-minor-mode)
      ("C-b" "Create branch from issue" jf/git-branch-create-from-safari :if-non-nil jf/forem-minor-mode)
      ("C-i" "Goto issue for branch" jf/git-github-issue-short-ref :if-non-nil jf/forem-minor-mode)
      ]])
#+end_src

* Conclusion

The functions that I’ve written to help me “get things done” at Forem, build on
and help build out other Emacs extensions for my “How I use my computer”
environment.  In other words, I’m thinking in terms of automation, or more
precisely reducing decisions I need to make while “wearing” one of the many
hats I “wear” throughout the day.