# -*- org-insert-tilde-language: emacs-lisp; -*-
#+TITLE: Burning Wheel Emacs Configuration
#+AUTHOR: Jeremy Friesen
#+EMAIL: jeremy@jeremyfriesen.com
#+STARTUP: showall
#+OPTIONS: toc:3

The functions of this file build on functions from [[file:configuration.org][Configuration]].

Being a programmer and someone who plays table top role-playing games (TTRPG),
I’ve often used the TTRPG rules-set or systems to explore programming languages
and processes.  After all, I understand the TTRPG rules well enough (or the
algorithm’s description) that I can spend time thinking through my approach in
a programming language.

* Minor Mode for Burning Wheel

#+begin_src emacs-lisp
  (jf/minor-mode-maker :title "Burning Wheel Gold"
		       :abbr "bwg"
		       :hooks (list 'org-mode-hook 'markdown-mode-hook))
#+end_src

* Quick Help Functions

Most role-playing games I play may require a bit of consultation.  The following
“quick help” methods are tables that I commonly reference when playing Burning
Wheel Gold.

#+begin_src emacs-lisp
  (jf/transient-quick-help jf/bwg-qh-wises
    :label "Wises"
    :header "BWG Wises Obstacles (page 309)"
    :body
    (s-join
     "\n"
     '("Common knowledge ............. Ob 1"
       "An interesting fact .......... Ob 2"
       "Details ...................... Ob 3"
       "Uncommon knowledge ........... Ob 4"
       "Rare goods ................... Ob 5"
       "Bizarre or obscure ........... Ob 7"
       "Freaky details or specifics .. Ob 8")))

  (jf/transient-quick-help jf/bwg-qh-expertise-exponent
    :label "Exponents"
    :header "BWG Expertise Exponent (page 12)"
    :body
    (s-join
     "\n"
     '("Exp 1  is naturally disinclined, crippled, or utterly incompetent."
       "Exp 2  is untrained, raw, weak, or unpracticed."
       "Exp 3  is nominally trained and practiced."
       "Exp 4  is competent; everday stuff doesn't pose a challenge."
       "Exp 5  is expert."
       "Exp 6  is near mastery."
       "Exp 7  is excellence."
       "Exp 8  is total mastery, complete understanding."
       "Exp 9  is uncanny; incomprehensibly good."
       "Exp 10 is as near perfection as the system allows.")))

  (jf/transient-quick-help jf/bwg-qh-absolute-difficulty
    :label "Difficulty"
    :header "BWG Absolute Difficulty (page 15)"
    :body
    (s-join
     "\n"
     '("Ob 1  A simple act done with little thought."
       "Ob 2  An act performed routinely at your job."
       "Ob 3  An act you can accomplish if you concentrate."
       "Ob 4  A risky act."
       "Ob 5  An act that requires expertise."
       "Ob 6  An act that requires a heroic effort."
       "Ob 7  An improbable feat."
       "Ob 8  An act requiring preternatural ability or a lot of help."
       "Ob 9  An act deemed nearly impossible."
       "Ob 10 A miracle.")))

  (jf/transient-quick-help jf/bwg-qh-circles-obstacles
    :label "Circles"
    :header "BWG Circles Obstacles (page 380-381)"
    :body
    (s-join
     "\n"
     '("Occupation"
       "  Broad occupation/profession, same life path ... +0 Ob"
       "  Uncommon occupation, or within same setting ... +2 Ob"
       "  Specific occupation, rare/unique occupation ... +3 Ob"
       ""
       "Station"
       "  Same station .................................. +0 Ob"
       "  Lower rank, station, or class ................. +1 Ob"
       "  Higher rank, station, or class ................ +2 Ob"
       "  Highest station or rank in the setting ........ +3 Ob"
       ""
       "Disposition and Knowledge"
       "  Common to circle .............................. +0 Ob"
       "  Different from circle members ................. +1-2 Ob"
       "  Specific, detailed, or rare ................... +3 Ob"
       ""
       "Time and Place"
       "  Doesn't matter ................................ +0 Ob"
       "  Unusual for this character .................... +1-2 Ob"
       "  Right here and now in the middle of trouble ... +3 Ob")))

  (jf/transient-quick-help jf/bwg-qh-circles-alternate
    :header "BWG Circles 2006 (Burning Anthology p7)"
    :label "Circles 2006"
    :body
    (s-join
     "\n"
     '("Occupation"
       "  Broad/common .................... +0 Ob"
       "  Uncommon ........................ +2 Ob"
       "  Specific/rare/unique ............ +2 Ob"
       ""
       "Station"
       "  Same station .................... +0 Ob"
       "  Higher or lower rank ............ +1 Ob"
       "  Lowest .......................... +2 Ob"
       "  Highest ......................... +3 Ob"
       ""
       "Attitude"
       "  Neutral to PC ................... +0 Ob"
       "  Predisposed or opposed .......... +1 Ob"
       "  Proponent, loyal, or specific ... +3 Ob"
       ""
       "Knowledge"
       "  Unimportant ..................... +0 Ob"
       "  General for subject ............. +1 Ob"
       "  Specific subject ................ +3 Ob"
       ""
       "Skill"
       "  Typical (Exponent 3) ............ +0 Ob"
       "  Competent (Exponent 4) .......... +1 Ob"
       "  Expert (Expoonent 5) ............ +2 Ob"
       "  Master (Exponent 6) ............. +3 Ob"
       ""
       "Place/Time"
       "  Prior to important test ......... +0 Ob"
       "  Prior to conflict ............... +1 Ob"
       "  In midst of conflict ............ +3 Ob"
       )))

  (jf/transient-quick-help jf/bwg-qh-steel-test-adjustments
    :header "BWG Steel Test Adjustments (page 363)"
    :label "Steel"
    :body
    (s-join
     "\n"
     '("Conditions for Steel Advantags"
       "  Being startled by something mundane ........ +2D"
       "  Feeling safe in a group of friends/allies .. +1D"
       ""
       "Conditions for Steel Disadvantages"
       "  Being shot at .............................. +1 Ob"
       "  Being directly affect by magic ............. +1 Ob"
       "  Witnessing a person killed ................. +1 Ob"
       "  Small explosions ........................... +2 Ob"
       "  Committing murder .......................... +2 Ob"
       "  Explosions ................................. +3 Ob"
       "  Witnessing pronounced sorcery at play ...... +3 Ob"
       "  Seeing a ghost ............................. +3 Ob"
       "  Seeing the living dead ..................... +4 Ob"
       "  Volcanic eruptions, cataclysm .............. +4 Ob"
       "  Seeing horrible magic at work .............. +4 Ob"
       "  Being in the presence of the supernatural .. +5 Ob")))
#+end_src

** Physical Trauma Gray Scale (PTGS)

When running Burning Wheel Gold, on occassion I need to establish the PTGS for
a creature or person.

Yes, I could’ve written out ~(0 "B1" "B2" "B3" "B4" "B5" "B6" "B7" "B8" "B9"
"B10" "B11" "B12" "B13" "B14" "B15" "B16" "G1" "G2" "G3" "G4" "G5" "G6" "G7"
"G8" "G9" "G10" "G11" "G12" "G13" "G14" "G15" "G16" "W1" "W2" "W3" "W4" "W5"
"W6" "W7" "W8" "W9" "W10" "W11" "W12" "W13" "W14" "W15" "W16")~ faster than the
following constant, but I wanted to learn a bit of emacs-lisp, so I chose to
write the following.[fn:1]

#+begin_src emacs-lisp
  (defconst jf/bwg-mortal-wounds-scale
    (let* ((shades '("B" "G" "W"))
	   (rank '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))
	   (scale (-flatten
		   (-map (lambda (s)
			   (-map (lambda (r)
				   (format "%s%s" s r))
				 rank))
			 shades))))
      ;; I want B1 to have an index of 1.  Hence pre-pending the 0 to the list.
      (add-to-list 'scale 0)
      scale)
    "The BWG Physical Tolerance Grayscale (from B1 to W16).")
#+end_src

Next up is a function for calculating a Black or Gray PTGS.  This is not clean nor
elegant, but it works.

#+begin_src emacs-lisp
  (defun jf/bwg-qh-ptgs (forte power &optional round-up)
    "Calculate Burning Wheel PTGS.

  This requires FORTE, POWER, and ROUND-UP.

  Note, this assumes Black or Grey shade only."
    (interactive "sForte: \nsPower: \nP")
    ;; Note the / function uses integer floor division.
    (let* ((forte-index (-elem-index (upcase forte) jf/bwg-mortal-wounds-scale))
	   (power-index (-elem-index (upcase power) jf/bwg-mortal-wounds-scale)))
      (unless forte-index (throw 'invalid-entry (format "Invalid Forte %s" forte)))
      (unless power-index (throw 'invalid-entry (format "Invalid Power %s" power)))
      (let ((scale (cond ((and (< forte-index 14) (< power-index 14))
			  (jf/bwg-qh-ptgs--shade-black forte-index
						       power-index
						       round-up))
			 ((and (< forte-index 14) (< power-index 28))
			  (jf/bwg-qh-ptgs--shade-black forte-index
						       (- power-index 13)
						       round-up
						       :add 2))
			 ((and (< forte-index 28) (< power-index 14))
			  (jf/bwg-qh-ptgs--shade-black (- forte-index 13)
						       power-index
						       round-up
						       :add 2))
			 ((and (< forte-index 28) (< power-index 28))
			  (jf/bwg-qh-ptgs--shade-gray forte-index
						      power-index
						      round-up)))))
	(jf/bwg-qh-ptgs--render-popup :power power
				      :forte forte
				      :round-up round-up
				      :scale scale))))

  (cl-defun jf/bwg-qh-ptgs--render-popup (&key power forte round-up scale)
    "Render PTGS help for given POWER, FORTE, ROUND-UP, and SCALE

    Where SCALE is a list of 6 elements: Su, Li, Mi, Se, Tr, and Mo"
    (jf/quick-help
     :header "BWG PTGS (p98, p546)"
     :body (format (concat
		    "Su %s; Li %s; Mi %s; Se %s; Tr %s; Mo %s"
		    "\n\nForte: %s\nPower: %s"
		    (when round-up "\n(Rounded up)"))
		   (nth (nth 0 scale) jf/bwg-mortal-wounds-scale)
		   (nth (nth 1 scale) jf/bwg-mortal-wounds-scale)
		   (nth (nth 2 scale) jf/bwg-mortal-wounds-scale)
		   (nth (nth 3 scale) jf/bwg-mortal-wounds-scale)
		   (nth (nth 4 scale) jf/bwg-mortal-wounds-scale)
		   (nth (nth 5 scale) jf/bwg-mortal-wounds-scale)
		   (upcase forte)
		   (upcase power))))
#+end_src

On page 98 of “Burning Wheel Gold Revised”, we have instructions for
calculating PTGS for most characters.  Page 546 overlays those instructions
with additional instructions for calculating Gray-shaded attributes.

#+begin_src emacs-lisp
  (cl-defun jf/bwg-qh-ptgs--shade-black (forte power &optional round-up &key (add 0))
    "Calculate Black shade PTGS (BWGR p98, p546).

  This requires FORTE, POWER, and ROUND-UP.

  Returns a list of 6 elements: Su, Li, Mi, Se, Tr, and Mo"
    (interactive "nForte: \nnPower: \nP")
    ;; Note the / function uses integer floor division.
    (let* ((mw-rnd (if round-up 1 0))
	   (mo (+ 6 add (/ (+ forte power mw-rnd) 2)))
	   (step (+ (/ (+ 1 forte) 2)))
	   (su (+ 1 (/ forte 2)))
	   (li (+ su step))
	   (mi (+ li step))
	   (se (+ mi step))
	   (tr (+ se step))
	   (tr (if (< tr mo) tr (- mo 1)))
	   (se (if (< se tr) se (- tr 1)))
	   (mi (if (< mi se) mi (- se 1)))
	   (li (if (< li mi) li (- mi 1))))
      (list su li mi se tr mo)))

  (defun jf/bwg-qh-ptgs--shade-gray (forte power &optional round-up)
    "Calculate Gray shade PTGS (BWGR p546).

  This requires FORTE, POWER, and ROUND-UP.

  Returns a list of 6 elements: Su, Li, Mi, Se, Tr, and Mo"
    (let* ((fort-exponent (- forte 16))
	   (mw-rnd (if round-up 1 0))
	   (mo (+ 6 (/ (+ forte power mw-rnd) 2)))
	   (su fort-exponent)
	   (li (+ su fort-exponent))
	   (mi (- mo 4))
	   (se (- mo 2))
	   (tr (- mo 1)))
      (list su li mi se tr mo)))
#+end_src

** Lifepath Browser

While running (or playing) a game of Burning Wheel, it can be useful to have
access to character lifepaths.  These can give you insight into a quick NPC.

I have transformed and edited the [[http://charred-black.herokuapp.com/#/][Charred - The Burning Wheel Gold Character
Burner]] data into individual YAML files that sit on my local machine.  I also
created a bit of [[https://gohugo.io/][Hugo]] code to render lifepaths from those YAML files.  You can
see an example at [[https://takeonrules.com/2018/10/10/burning-wheel-lifepaths-inspired-by-warhammer-fantasy/][Burning Wheel Lifepaths Inspired by Warhammer Fantasy]].

I’m thinking what would be useful to create a searchable index of those
lifepaths.  For now, I’ll search based on the stock, setting, and lifepath name
(all of which happen to be in the pathname of the YAML file).

But instead of hopping to the YAML file, I’d like to jump to the spot on an
HTML page with that information.  This way when I “find” a lifepath, I can see
what other lifepaths are of comparable station (a common need when testing
Circles).

- [ ] I need a “stable” HTML files with all lifepaths.  Each lifepath should
  have a unique DOM ID.

#+begin_src emacs-lisp
  (defconst jf/bwg-lifepath--path-to-html-file
    "~/git/org/assets/burning-wheel.html"
    "The path to an HTML")

  (defconst jf/bwg-lifepath--narrowing-regexp
    "data-lifepath="
    "All lines in `jf/bwg-lifepath--path-to-html-file' that have this substring contain filterable data.")
#+end_src

#+begin_example
> rg "id=\"(?P<domId>[^\"]*)\" data-description=\"(?P<desc>[^\"]*)\"" -r '$desc $domId' -o \
     ~/git/org/assets/burning-wheel.html
#+end_example

* Menu

The following menu is for quick help while playing Burning Wheel games.  I
previously defined the suffixes.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-s-b") 'jf/menu--bwg)
  (transient-define-prefix jf/menu--bwg ()
    "Define the BWG help prefix."
    ["Burning Wheel"
     ("c" jf/bwg-qh-circles-obstacles)
     ("C" jf/bwg-qh-circles-alternate)
     ("d" jf/bwg-qh-absolute-difficulty)
     ("e" jf/bwg-qh-expertise-exponent)
     ("p" "PTGS" jf/bwg-qh-ptgs)
     ("s" jf/bwg-qh-steel-test-adjustments)
     ("w" jf/bwg-qh-wises)
     ])
#+end_src

* Footnotes

[fn:1] I copyied that text string from the introspected variable.  Because if I
wasn't going to write it the first time, I sure wasn't going to do it if I had
already stored that value in a constant.
