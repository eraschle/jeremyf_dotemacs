# -*- org-insert-tilde-language: emacs-lisp; -*-
#+TITLE: Tabs

Show tabs in the current window.  The tab system is something I wrestle with, but I appreciate it’s existence.  These configurations make it easier to use.

* Awesome Tabs

#+begin_src emacs-lisp
  (use-package awesome-tab
    :after (all-the-icons)
    :straight t
    :custom
    ;; When set via custom this ensures that it shows tabs.  When set via config,
    ;; the awesome-tab-mode is “active” but there are no tabs; I need to toggle
    ;; it off then on to see the tabs.
    (awesome-tab-mode t)
    :config
    (defun awesome-tab-buffer-groups ()
      "`awesome-tab-buffer-groups' control buffers' group rules.

  Group awesome-tab with mode  if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.

  All buffer name start with * will group to \"Emacs\".
  Other buffer group by `awesome-tab-get-group-name' with project name."
      (list
       (cond
	;; ((not (eq (file-remote-p (buffer-file-name)) nil))
	;; "Remote")
	((or (string-equal "*" (substring (buffer-name) 0 1))
	     (memq major-mode '(magit-process-mode
				magit-status-mode
				magit-diff-mode
				magit-log-mode
				magit-file-mode
				magit-blob-mode
				magit-blame-mode
				)))
	 "Emacs")
	((derived-mode-p 'prog-mode)
	 "Programming")
	((derived-mode-p 'dired-mode)
	 "Dired")
	((memq major-mode '(helpful-mode
			    help-mode))
	 "Help")
	((memq major-mode '(org-mode
			    org-agenda-clockreport-mode
			    org-src-mode
			    org-agenda-mode
			    org-beamer-mode
			    org-indent-mode
			    org-bullets-mode
			    org-cdlatex-mode
			    org-agenda-log-mode
			    diary-mode))
	 "OrgMode")
	(t
	 (awesome-tab-get-group-name (current-buffer))))))
  :bind
      ("s-[" . awesome-tab-backward-group)
      ("s-]" . awesome-tab-forward-group)
      ;; Move through the tabs of the group
      ("s-{" . awesome-tab-backward-tab)
      ("s-}" . awesome-tab-forward-tab)
      ("s-;" . awesome-tab-ace-jump)
      ("s-\\" . awesome-tab-switch-group))

#+end_src

I learned about =eyebrowse.el= from https://github.com/frostyx/dotfiles/blob/master/.emacs.d/frostyx.org#eyebrowse-1.  I’m curious to explore this window manager.

#+begin_src emacs-lisp
  (use-package eyebrowse
    :straight t
    :config
    (eyebrowse-mode t)
    :bind (("M-0" . eyebrowse-switch-to-window-config-0)
	   ("M-1" . eyebrowse-switch-to-window-config-1)
	   ("M-2" . eyebrowse-switch-to-window-config-2)
	   ("M-3" . eyebrowse-switch-to-window-config-3)
	   ("M-4" . eyebrowse-switch-to-window-config-4)
	   ("M-5" . eyebrowse-switch-to-window-config-5)
	   ("M-6" . eyebrowse-switch-to-window-config-6)
	   ("M-7" . eyebrowse-switch-to-window-config-7)
	   ("M-8" . eyebrowse-switch-to-window-config-8)
	   ("M-9" . eyebrowse-switch-to-window-config-9)))
#+end_src