# -*- lexical-binding: t; -*-
# -*- org-insert-tilde-language: emacs-lisp; -*-
:PROPERTIES:
:ID:       C6186B18-0AEC-4863-B9D6-46BE400815F1
:END:
#+TITLE: Take on Rules
#+SUBTITLE: Or How I Want to Test This Thing Out
#+AUTHOR: Jeremy Friesen
#+EMAIL: jeremy@jeremyfriesen.com
#+FILETAGS: :takeonrules:
#+STARTUP: showall
#+OPTIONS: toc:3
#+HUGO_BASE_DIR: ~/git/takeonrules.source

* Org Export

I want to add a custom org exporter for [[id:C8741E14-55FB-4250-A43B-2CCFB74A7A59][Take on Rules]].  First, I need to ensure
that I have required ~ox~.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :init (require 'ox))
#+END_SRC

I use ~org-roam~ for my organization, so I’m assuming I’ll be exporting one
file at a time.  I have considered using [[https://ox-hugo.scripter.co/][ox-hugo]], but it’s not quite what I’m
after.  In [[id:23288DD9-9559-4870-A0BE-E01087A8EC5D][Migrating from Hugo to Org]], a private file, I considered what to do.
/Note: When I use org’s export for this file, there shouldn’t be a link for
Migrating from Hugo to Org.  However, those of you reading this file outside of
the export will have a link to a Not Found resource/

** Extending the Ox

When I’m exporting an ~org~ file, it likely includes links to files on my
file-system.  However, in that export, it’s not overly helpful to provide links
to those personal files.

Instead, I want to leverage [[https://www.orgroam.com/manual.html#Refs-1][org-roam ~ROAM_REFS~ property]].  During export, if the
link is an ~id~ link, I’ll assume it’s an internal reference.  When that
internal reference has a ~ROAM_REFS~ property, I’ll use that as the URL.
Otherwise, I’ll assume I haven’t “exported” that document, and will instead
render the description (perhaps with an indicator that this is).

#+begin_src emacs-lisp
  (defun jf/org-tor-link (fn link desc &rest rest)
    "Conditional LINK and DESC rendering for ID-based links.

  Otherwise `apply' the FN with the REST of the parameters."
    (if (string= "id" (org-element-property :type link))
	(jf/org-md-link-by-id link desc)
      (apply fn link desc rest)))

  (advice-add #'org-md-link :around #'jf/org-tor-link '((name . "wrapper")))
  (advice-add #'org-hugo-link :around #'jf/org-tor-link '((name . "wrapper")))

  (defun jf/org-md-link-by-id (link desc)
    "With an \"id\" type LINK render the markdown.

    DESC is the text of the link."
    (let* ((filepath (org-id-find-id-file (org-element-property :path link)))
	   (url (jf/org-file-get-roam-refs filepath)))
      (if url (format "[%s](%s)" desc url)
	;; I'm choosing the I-tag as it's similar to my i.dfn for pseudo-definitions.
	(format "<i class=\"ref\">%s</i>" desc))))

  (cl-defun jf/org-file-get-roam-refs (filepath)
    "Return first ROAM_REFS property in the FILEPATH."
    (with-current-buffer (find-file-noselect filepath)
      (car (org-property-values "ROAM_REFS"))))
#+end_src

#+begin_src emacs-lisp
  (defun jf/export-org-to-tor ()
    "Export current org buffer for TakeOnRules post."
    (interactive)
    ;; Ensure that we have an ID property.
    (jf/export-org-to-tor--ensure-org-id-property)
    (let* ((export-global-plist (jf/org-global-props-as-plist))
	   (title (jf/export-org-to-tor--global-buffer-prop-ensure
		   :key "TITLE"
		   :plist export-global-plist))
	   (subtitle (jf/export-org-to-tor--global-buffer-prop-ensure
		      :key "SUBTITLE"
		      :plist export-global-plist))
	   (section (jf/export-org-to-tor--global-buffer-prop-ensure
		     :key "HUGO_SECTION"
		     :plist export-global-plist
		     :default (format-time-string "content/%Y")))
	   (format (jf/export-org-to-tor--global-buffer-prop-ensure
		    :key "HUGO_FRONT_MATTER_FORMAT"
		    :plist export-global-plist
		    :default "yaml"))
	   (base_dir (jf/export-org-to-tor--global-buffer-prop-ensure
		      :key "HUGO_BASE_DIR"
		      :plist export-global-plist
		      :default "~/git/takeonrules.source")))
      )
    ;; - Inject front_matter_extra section
    ;; - Add filetag :exported:


    ;; During this process, write source-filename to exported-filename's
    ;; metadata.
    ;; (org-open-file (org-hugo-export-wim-to-md nil nil t))
    )

  (defun jf/export-org-to-tor--ensure-org-id-property ()
    "Ensure the current buffer has an ID property."
    (save-excursion
      (beginning-of-buffer)
      (org-id-get-create)))

  (cl-defun jf/export-org-to-tor--global-buffer-prop-ensure (&key key plist (default nil) (buffer (current-buffer)))
    "Ensure the BUFFER has the given KEY in the global PLIST, if not set the DEFAULT or prompt for it."
    (let ((value (lax-plist-get plist key)))
      (if value value
	(jf/export-org-to-tor--global-buffer-prop-set
	 :key key
	 :buffer buffer
	 :value (or default (read-from-minibuffer (format "%s: " key)))))))

  (cl-defun jf/export-org-to-tor--global-buffer-prop-set (&key key value buffer)
    "Set the global property named KEY to the VALUE for the given BUFFER"
    (message "KEY %s\nVALUE %s" key value))

  (defun jf/org-global-props-as-plist ()
    (-flatten (mapcar (lambda (prop)
	    (list (org-element-property :key prop)
		  (org-element-property :value prop)))
	    (jf/org-global-props "\\(FILETAGS\\|HUGO_FRONT_MATTER_FORMAT\\|HUGO_SECTION\\|HUGO_BASE_DIR\\|TITLE\\|SUBTITLE\\)"))))


  (defun jf/org-global-props (&optional property buffer)
    "Get the plists of global org properties of current buffer."
    (unless property (setq property "PROPERTY"))
    (with-current-buffer (or buffer (current-buffer))
      (org-element-map
	  (org-element-parse-buffer)
	  'keyword
	(lambda (el)
	  (when (string-match property (org-element-property :key el)) el)))))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Stuff for your org-file:
#+end_src

** Things to Work

- [ ] After export shift series from tag.
- [ ] Include in export the source file; when rake publish, update ~ROAM_REFS~ of source.
- [X] Adjust tags to have dashes.
- [ ] ~org-hugo-export-snippet~ works for hugo, md, and markdhown contexts.
  But this function doesn’t exist for markdown export.