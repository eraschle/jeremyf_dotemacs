# -*- org-insert-tilde-language: emacs-lisp; -*-
:PROPERTIES:
:ID:       82C14F1A-163D-4774-A27F-1D792495922A
:END:
:HUGO:
#+HUGO_FRONT_MATTER_FORMAT: yaml
#+HUGO_BASE_DIR: ~/git/takeonrules.source
#+HUGO_SECTION: posts/2022
:END:
#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :comments link
#+AUTHOR: Jeremy Friesen
#+EMAIL: jeremy@jeremyfriesen.com
#+STARTUP: showall
#+OPTIONS: toc:3

Welcome to a stripped down configuration; I have been working with a literate configuration but have found that it doesn’t suit my needs.  I want to be able to jump to the definition and begin editing.

** Baseline Requires

#+begin_src emacs-lisp
  (require 'jf-launching)
  (require 'jf-minor-mode-maker)
  (require 'jf-illuminating)
  (require 'jf-navigating)
  (require 'jf-fonts-and-iconography)
  (require 'jf-windows)
  (require 'jf-utility)
  (require 'jf-completing)
  (require 'jf-coding)
  (require 'jf-organizing)
  (require 'jf-framing)
  (require 'jf-utility)
  (require 'jf-writing)
  (require 'jf-communicating)
  (require 'jf-org-mode)
  (require 'jf-denote)
  (require 'jf-reading)
  (require 'jf-versioning)
  (require 'jf-quick-help)
  (require 'jf-gaming)
#+end_src

** TODO Functions to Place in their Package

#+begin_src emacs-lisp
  ;; Insert an active timestamp, with a few options.
  (global-set-key (kbd "s-5") 'jf/org-insert-immediate-active-timestamp)
  (defun jf/org-insert-immediate-active-timestamp (parg)
    "Insert an active date for today.

  One universal arg (e.g., prefix call with C-u) inserts timestamp.
  Two universal arsg (e.g., prefix call with C-u C-u) prompts for date then insertes active date."
    (interactive "P")
    (let ((prefix (car parg)))
      (cond
       ((not prefix)  (org-insert-time-stamp nil nil nil))
       ((= prefix 4)  (org-insert-time-stamp nil t nil))
       ((= prefix 16) (org-insert-time-stamp (org-read-date nil t nil "Date") nil nil)))))

  (global-set-key (kbd "C-w") 'jf/delete-region-or-backward-word)
  (global-set-key (kbd "M-DEL") 'jf/delete-region-or-backward-word)
  (global-set-key (kbd "<C-M-backspace>") 'backward-kill-paragraph)
  (defun jf/delete-region-or-backward-word (&optional arg)
    "Delete selected region otherwise delete backwards the ARG number of words."
    (interactive "p")
    (if (region-active-p)
        (delete-region (region-beginning) (region-end))
      (sp-backward-delete-word arg)))

  ;; Wedding two methods together: `kill-region' and `kill-line'.
  (global-set-key (kbd "C-k") 'jf/kill-line-or-region)
  (defun jf/kill-line-or-region (&optional parg)
    "Kill the selected region otherwise kill the PARG number of lines."
    (interactive "P")
    (if (use-region-p)
        (kill-region (region-beginning) (region-end))
      (kill-line parg)))

  ;; There are plenty of times where I want the file name.  This command helps me
  ;; get either it’s full path, or it’s base name.
  (global-set-key (kbd "C-c n") 'jf/nab-file-name-to-clipboard)
  (defun jf/nab-file-name-to-clipboard (parg)
    "Nab, I mean copy, the current buffer file name to the clipboard.

  The PARG is the universal prefix argument.

  If you pass no args, copy the filename with full path.
  If you pass one arg, copy the filename without path.
  If you pass two args, copy the path to the directory of the file."
    ;; https://blog.sumtypeofway.com/posts/emacs-config.html
    (interactive "P")
    (let* ((prefix (car parg))
           (raw-filename
            (if (equal major-mode 'dired-mode) default-directory (buffer-file-name)))
           (filename
            (cond
             ((not prefix)  raw-filename)
             ((= prefix 4)  (file-name-nondirectory raw-filename))
             ((= prefix 16) (file-name-directory raw-filename)))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))

  ;; A simple combination of two functions `sort-lines'
  ;; and `delete-duplicate-lines'.
  (defun jf/sort-unique-lines (reverse beg end &optional adjacent keep-blanks interactive)
    "Sort lines and delete duplicates.

  By default the sort is lexigraphically ascending.  To sort as
  descending set REVERSE to non-nil.  Specify BEG and END for the
  bounds of sorting.  By default, this is the selected region.

  I've included ADJACENT, KEEP-BLANKS, and INTERACTIVE so I can
  echo the method signature of `'delete-duplicate-lines`"
    (interactive "P\nr")
    (sort-lines reverse beg end)
    (delete-duplicate-lines beg end reverse adjacent keep-blanks interactive))

  ;; Creates a sticky side window.  Sometimes this is just the right thing for
  ;; reviewing files.  I don’t know when I need it, but when I use it I’m always
  ;; thankful I have it.
  (global-set-key (kbd "C-s-\\") 'jf/display-dedicated-buffer-in-side-window)
  (cl-defun jf/display-dedicated-buffer-in-side-window (&key (buffer (current-buffer)))
    "Display the given BUFFER in a dedicated sidebar."
    (interactive)
    (with-current-buffer buffer
      (jf/sidebar--build
       :buffer-name (concat "*Sidebar*")
       :position (point)
       :read-only t
       :body (buffer-string)
       :mode major-mode)))

  (cl-defun jf/sidebar--build (&key buffer-name body (read-only nil) (position nil) (mode nil))
    "Build the sidebar from the given buffer attributes.

  Create the BUFFER_NAME with the given BODY and move to the given
  POSITION and toggle on the MODE.  Then set the buffer to READ_ONLY."
    (interactive)
    (get-buffer-create buffer-name)
    (with-current-buffer buffer-name
      (insert body)
      (goto-char (or position (point-min)))
      (not-modified)
      (if mode (funcall mode) (special-mode))
      (when read-only
        (progn (read-only-mode) (local-set-key (kbd "s-w") 'kill-buffer-and-window)))
      (let ((display-buffer-mark-dedicated t))
        (pop-to-buffer buffer-name '((display-buffer-in-side-window)
                                     (side . right)
                                     (window-width 72)
                                     (window-parameters
                                      (tab-line-format . none)
                                      (mode-line-format . none)
                                      (no-delete-other-windows . t))))
        (message "Created *Sidebar*\nq - Remove Window")
        (require 'pulsar)
        (pulsar-pulse-line))))

  ;; Sometimes I want to move, without renaming, a file.  This function helps
  ;; make that easy.
  (global-set-key (kbd "C-x m") 'jf/move-file)
  (defun jf/move-file (target-directory)
    "Write this file to TARGET-DIRECTORY, and delete old one."
    (interactive "DTarget Directory: ")
    (let* ((source (expand-file-name (file-name-nondirectory (buffer-name)) default-directory))
           (target (f-join target-directory (file-name-nondirectory (buffer-name)))))
      (save-buffer)
      (rename-file source target)
      (kill-current-buffer)))

  ;; From http://mbork.pl/2022-05-23_Copying_code_snippets
  (defun jf/copy-snippet-deindented (begin end)
    "Copy region, between BEGIN and END, untabifying and removing indentation."
    (interactive "r")
    (let ((orig-tab-width tab-width)
          (region (buffer-substring-no-properties begin end)))
      (with-temp-buffer
        (setq tab-width orig-tab-width)
        (insert region)
        (untabify (point-min) (point-max))
        (org-do-remove-indentation)
        (kill-new (buffer-string)))))

  ;; Sometimes I just want to duplicate an area without copy and paste.  This
  ;; helps that process.  It’s not as smart as TextMate’s equivalent function,
  ;; but it’s close enough.
  (global-set-key (kbd "C-M-d") 'jf/duplicate-current-line-or-lines-of-region)
  (global-set-key (kbd "C-c d") 'jf/duplicate-current-line-or-lines-of-region)
  (defun jf/duplicate-current-line-or-lines-of-region (parg)
    "Duplicate ARG times current line or the lines of the current region."
    (interactive "p")
    (if (use-region-p)
        (progn
          (when (> (point) (mark))
            (exchange-point-and-mark))
          (beginning-of-line)
          (exchange-point-and-mark)
          (end-of-line)
          (goto-char (+ (point) 1))
          (exchange-point-and-mark)
          (let* ((end (mark))
                 (beg (point))
                 (region
                  (buffer-substring-no-properties beg end)))
            (dotimes (_i parg)
              (goto-char end)
              (insert region)
              (setq end (point)))))
      (crux-duplicate-current-line-or-region parg)))

  ;; A simple wrapper around scratch, that helps name it and sets the major mode
  ;; to `org-mode'.
  (global-set-key (kbd "<f12>") 'jf/create-scratch-buffer)
  (cl-defun jf/create-scratch-buffer (&key (mode 'org-mode))
    "Quickly open a scratch buffer and enable the given MODE."
    (interactive)
    (crux-create-scratch-buffer)
    (rename-buffer (concat "*scratch* at " (format-time-string "%Y-%m-%d %H:%M")))
    (funcall mode))


  (org-babel-load-file
     (concat user-emacs-directory "takeonrules.org"))

  (org-babel-load-file
     (concat user-emacs-directory "keyboard-macros-config.org"))

  (org-babel-load-file
   (concat user-emacs-directory "utility-functions.org"))
#+end_src

** TODO Menus



#+begin_src emacs-lisp
  ;; this suffix provides a dynamic description of the current host I want to use
  ;; for my blog.  And the prefix’s function toggles the host.
  (transient-define-suffix jf/tor-hostname-current-toggle (hostname)
    "Set `jf/tor-hostname-current' to HOSTNAME."
    :description '(lambda ()
                    (concat "Host: "
                            (propertize
                             (format "%s" jf/tor-hostname-current)
                             'face 'transient-argument)))
    (interactive (list (completing-read
                        "Host: " (list
                                  (list jf/tor-hostname-default-local 1)
                                  (list jf/tor-hostname-default-remote 2)
                                  ))))
    (setq jf/tor-hostname-current hostname))

  (transient-define-prefix jf/menu--tor ()
    "My Take on Rules menu; useful when developing my blog."
    ["Take on Rules"
     ["Host"
      ("-h" jf/tor-hostname-current-toggle :transient t)
      ]]
    [["Posts"
      :if-non-nil jf/tor-minor-mode
      ("p r" "Re-title post…" jf/tor-retitle-post)
      ("p t" "Tag post…" jf/tor-tag-post :transient t)
      ("p v" "View post…" jf/tor-view-blog-post)
      ]
     ["Find"
      ("f d" "in draft status…" jf/tor-find-file-draft)
      ("f u" "by url…" jf/tor-find-hugo-file-by-url)
      ("f f" "by filename…" jf/tor-find-file)]
     ["Create"
      ("c a" "Amplify the Blogosphere…" jf/tor-post-amplifying-the-blogosphere)
      ("c c" "Changelog entry…" jf/tor-find-changelog-and-insert-entry)
      ("c e" "Epigraph entry…" jf/tor-insert-epigraph-entry)
      ("c g" "Glossary entry…" jf/tor-find-glossary-and-insert-entry)
      ("c p" "Post…" jf/tor-create-post)
      ("c s" "Series…" jf/tor-find-series-and-insert-entry)]
     ])

  (global-set-key (kbd "s-1") 'jf/menu)
  (transient-define-prefix jf/menu ()
    "A context specific \"mega\" menu."
    ;; Todo, can I get this section into a function so I can duplicate it in the jf/menu--tor?
    [["Markdown Utilities"
      ("k h" "Kill slug version of given heading…" jf/kill-new-markdown-heading-as-slug :if-derived (or markdown-mode html-mode))
      ("w a" "A-tag at point or region…" jf/tor-wrap-link-active-region-dwim  :if-derived (or markdown-mode html-mode))
      ("w c" "CITE-tag point or region…" jf/tor-wrap-cite-active-region-dwim  :if-derived (or markdown-mode html-mode))
      ("w d" "DATETIME-tag point or region…" jf/tor-wrap-date  :if-derived (or markdown-mode html-mode))
      ("w f" "Wrap word or region in pseudo-DFN…" jf/tor-wrap-as-pseudo-dfn  :if-derived (or markdown-mode html-mode))
      ]
     [
      "" ;; Deliberate space for menu
      ("w m" "Margin-note line or region…" jf/tor-wrap-as-marginnote-dwim  :if-derived (or markdown-mode html-mode))
      ("w p" "Wrap point or region as Poem…" jf/tor-wrap-in-poem  :if-derived (or markdown-mode html-mode))
      ("w s" "Side-note sentence or region…" jf/tor-wrap-as-sidenote-dwim  :if-derived (or markdown-mode html-mode))
      ("w w" "Wrap point or region in html…" jf/tor-wrap-in-html-tag  :if-derived (or markdown-mode html-mode))
      ]]
    [["Contexts"
      ("-b" "Burning Wheel…"  jf/menu--bwg)
      ("-e" "Eberron…" jf/menu--eberron)
      ;; ("-f" "Forem…" jf/menu--forem)
      ("-t" "TakeOnRules…" jf/menu--tor)
      ("-w" "Register window configuration" window-configuration-to-register)
      ]
     ["Jump to"
      ("j a" "Agenda" jf/jump-to-agenda-or-mark)
      ("j b" "iBuffer" ibuffer)
      ("j g" "Global Mark" consult-global-mark)
      ("j h" "Hugo File" jf/jump_to_corresponding_hugo_file :if-derived org-mode)
      ("j m" "Mark" consult-mark)
      ("j o" "Org File" jf/jump_to_corresponding_org_file :if-non-nil jf/tor-minor-mode)
      ("j p" "Jump in PDF" doc-view-goto-page :if-derived doc-view-mode)
      ("j s" "Jump to Shortdoc" shortdoc-display-group)
      ]
     ["Modes"
      ("C-n" "MacOS Night Shift" (lambda () (interactive) (shell-command "nightlight on")))
      ;; I could write functions for these, but this is concise enough
      ("m h" jf/hammerspoon-toggle-mode  :if-non-nil hammerspoon-edit-minor-mode)
      ("m t" "Typopunct ( )" typopunct-mode :if-nil typopunct-mode)
      ("m t" "Typopunct (*)" typopunct-mode :if-non-nil typopunct-mode)
      ("m o" "MacOS Native Option ( )" jf/toggle-osx-alternate-modifier :if-non-nil ns-alternate-modifier)
      ("m o" "MacOS Native Option (*)" jf/toggle-osx-alternate-modifier :if-nil ns-alternate-modifier)
      ]]
    ["Org"

     ;; ["Add Metadata"
     ;; ("C-e a" "Add epigraph properties…" jf/org-mode-add-epigraph-keys :if-derived org-mode)
     ;; ("C-e i" "Add epigraph at point…" jf/org-roam-insert-at-point-epigraph-macro :if-derived org-mode)
     ;; ("r a" "Ref add…" org-roam-ref-add :if-derived org-mode)
     ;; ("t s" "Tag as session report…" jf/org-tag-as-session-report :if-derived org-mode)
     ;; ("t a" "Tag add…" org-roam-tag-add :if-derived org-mode)
     ;; ("t S" "Tag as session Scene…" jf/org-tag-session-scene-with-date :if-derived org-mode)]
     ;; ["Context"
     ;; ("M-c" "Context set…" jf/org-auto-tags--set-by-context :transient t)
     ;; ("M-t" jf/org-auto-tags--transient :transient t)
     ;; ]
     ["Tasks"
      ("c" "Capture region to clock…" (lambda (b e p) (interactive "r\nP") (jf/capture-region-contents-with-metadata b e p)))
      ("s" "Search note content…" (lambda () (interactive) (consult-notes-search-in-all-notes)))
      ("S" "Search note filename…" (lambda () (interactive) (consult-notes)))
      ("C-t" "Start a timer…" tmr-with-description)
      ("u" "Copy stand-up to kill ring" jf/org-mode-agenda-to-stand-up-summary)
      ("w" "Weekly hours report" jf/org-mode-weekly-report)
      ("x" "Export to TakeOnRules…" jf/export-org-to-tor :if-derived org-mode)
      ]
     ["Grab Refs"
      ("g e" "Elfeed" jf/menu--org-capture-elfeed-show :if-derived elfeed-show-mode)
      ("g f" "Firefox" jf/menu--org-capture-firefox)
      ("g s" "Safari" jf/menu--org-capture-safari)
      ("g w" "Eww" jf/menu--org-capture-eww :if-derived eww-mode)
      ]
     ])
#+end_src
