*** Indesk

When running an RPG, I might have one or more books that I want to reference.
With physical books, I might rely on positional memory to help me navigate to
the section (e.g., it’s just a bit before the middle page).  I also rely on
both the index and the table of contents.

For this package, I’m first focusing on handling table of contents , though an
index would follow similar principles.  The reason for a “table of contents
first” approach is the tool chain for extracting table of contents is easier.
The ~pdftocio~ will extract the embedded table of contents from PDFs.

**** Data Structure

Much like my org-roam contexts, which I wrote about in [[https://takeonrules.com/2022/02/07/org-roam-emacs-and-ever-refining-the-note-taking-process/][Org Roam, Emacs, and
Ever Refining the Note Taking Process]], I am thinking of a conceptual book
shelf.  Each book on the would have the following attributes:

- title :: The title
- pdf path :: The path to the PDF
- tags :: These can be repurposed org-roam tags
- table of contents :: A parseable list of entries, each entry being the “name”
  and “page number”

/Note:/ It is my understanding that I could almost certainly use an org-mode
document for this information, and thus repurpose org-roam.  However, org-roam
would not be a required dependency.

**** Desired Functionality

I can choose the books I’m referencing; bringing them to my desk if you will.
I would then use a ~completing-read~ function to search the table of content
entries of the books on my desk.

Each candidate in the search would show the entry, page, and file basename.
Selecting a candidate opens the associated PDF to the respective page.

***** Create a reference org document

My initial thought is to store each book as an org document.  Org Mode provides
a means of describing each of those attributes.

You can see [[id:FC017488-D8EC-43DE-A35D-4D10A87B6A0D]["The Burning Wheel - Gold Edition Revised" by Luke Crane]] as the
resulting document.  An added benefit is that ~consult-imenu~ already parses
some of it; though it stops at heading level 2.  But that’s a future concern.

What this now means is I have a file that I’m confident I can parse, and can
slot into my existing note taking system.  I could see a case where that future
completing read could either take me to the org file’s node, or open the PDF to
that page.

In the case of the org file’s node, that would be a great place for annotations
and summary notes.

***** Phase 1 Functions

I want a script to convert the output of ~pdftocio~ to an org file for indesk.
That script should provide a title and a path.  I tried to use emacs-lisp for
this but ~pdftocio~ had other plans.  Instead I wrote a Ruby script.

I want to create a list of files that are on my current work desk.

#+begin_src emacs-lisp
  (defvar jf/indesk-current-files-on-desk
    nil
    "The list of files that are on the current work desk.")
#+end_src

That list of files will be populated with a completing read function.  I’m
uncertain what narrowing function I might want to consider.  For now let’s just
cheat.

#+begin_src emacs-lisp
  (cl-defun jf/indesk-file-candidates-for-cr (&key (dir org-directory) (tag ":indesk:"))
    "Get a list of files in DIR with TAG.

  This list is well suited for a completing read."
    (s-split "\n"
	     (s-trim
	      (shell-command-to-string
	       (concat "rg \"" tag "\" " dir " --files-with-matches")))))

  (cl-defun jf/indesk-current-files-on-desk--set (files)
    "Select FILES to use as source for work desk."
    (interactive
     (list
      (completing-read-multiple "Files(s): " (jf/indesk-file-candidates-for-cr))))
    (setq jf/indesk-current-files-on-desk files))
#+end_src

With that list of files on my desk, I want a function to select and jump to an
org heading element.

/Note:/ Given that I use ~consult~, experiments have lead me to believe I can
put a wrapper around ~consult-org-heading~ that passes the scope parameter.

#+begin_src emacs-lisp
  (global-set-key (kbd "s-2") 'jf/indesk-jump-to-file)
  (cl-defun jf/indesk-jump-to-file (&key (files jf/indesk-current-files-on-desk))
    "Jump to a heading from one of the FILES.

  If no FILES given, invoke `consult-imenu'."
    (interactive)
    (if (or (eq nil files) (seq-empty-p files))
	(if (derived-mode-p 'org-mode)
	    (consult-org-heading)
	  (consult-imenu))
      (consult-org-heading nil files)))
#+end_src

Given my ~jf/menu~, I probably should see what’s on my desk.  Let’s write a
transient function for that.

#+begin_src emacs-lisp
  (defun jf/indesk-current-files--shorten ()
    (-map
     (lambda (file) (file-name-nondirectory file))
     jf/indesk-current-files-on-desk))

  (transient-define-suffix jf/indesk-current-files-on-desk--transient (files)
    "Select FILES to use as source for work desk."
    :description '(lambda ()
		    (concat
		     "Indesk Files:"
		     (propertize
		      (format "%s" (jf/indesk-current-files--shorten))
		      'face 'transient-argument)))
    (interactive
     (list
      (completing-read-multiple "Files(s): " (jf/indesk-file-candidates-for-cr))))
    (setq jf/indesk-current-files-on-desk files))
#+end_src
