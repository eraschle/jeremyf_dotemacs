# -*- org-insert-tilde-language: emacs-lisp; -*-
#+TITLE: Emacs Experiments
#+AUTHOR: Jeremy Friesen
#+EMAIL: jeremy@jeremyfriesen.com
#+STARTUP: showall
#+OPTIONS: toc:3
#+PROPERTY: header-args:emacs-lisp :comments link

* Exploring Tree-Sitter

I was reading [[https://blog.meain.io/2022/more-treesitter-emacs/][Playing around with tree-sitter in Emacs]] and grew inspired to give it a spin.

#+begin_src emacs-lisp
  (setq jf/tree-sitter-class-like '((rust-mode . (impl_item))
				    (python-mode . (class_definition))
				    (enh-ruby-mode . (class))
				    (ruby-mode . (class))))
  (setq jf/tree-sitter-function-like '((rust-mode . (function_item))
				       (go-mode . (function_declaration method_declaration))
				       (python-mode . (function_definition))
				       (enh-ruby-mode . (method  singleton_method))))
  (defun jf/tree-sitter-thing-name (kind)
    "Get name of tree-sitter THING-KIND."
    (if tree-sitter-mode
	(let* ((node-types-list (pcase kind
				  ('class-like jf/tree-sitter-class-like)
				  ('function-like jf/tree-sitter-function-like)))
	       (node-types (alist-get major-mode node-types-list)))
	  (if node-types
	      (let ((node-at-point (car (remove-if (lambda (x) (eq nil x))
						   (seq-map (lambda (x) (tree-sitter-node-at-point x))
							    node-types)))))
		(if node-at-point
		    (let ((node-name-node-at-point (tsc-get-child-by-field node-at-point ':name)))
		      (if node-name-node-at-point
			  (tsc-node-text node-name-node-at-point)))))))))

  (defun jf/name-it ()
    (interactive)
    (message (format
	      "%s#%s"
	      (jf/tree-sitter-thing-name 'class-like)
	      (jf/tree-sitter-thing-name 'function-like)
	      )))
#+end_src

* Using Eldoc with Magit Asyncrhonously

Note: I tried the following but ended with an error.

https://tsdh.org/posts/2022-07-20-using-eldoc-with-magit-async.html

#+begin_src emacs-lisp
  (defvar jf/eldoc-git-show-stat--process nil)
  (defun jf/eldoc-git-show-stat (callback commit)
    "Compute diffstat for COMMIT asynchronously, then call CALLBACK with it."
    ;; Kill the possibly still running old process and its buffer.
    (when (processp jf/eldoc-git-show-stat--process)
      (let ((buf (process-buffer jf/eldoc-git-show-stat--process)))
	(when (process-live-p jf/eldoc-git-show-stat--process)
	  (let (confirm-kill-processes)
	    (kill-process jf/eldoc-git-show-stat--process)))
	(when (buffer-live-p buf)
	  (kill-buffer buf))))

    ;; Spawn a new "git show" process.
    (let* ((cmd (list "git" "--no-pager" "show"
		      "--no-color"
		      ;; Author Name <author@email.com>, <date-and-time>
		      "--format=format:%an <%ae>, %aD"
		      "--stat=80"
		      commit)))
      ;; An async eldoc-documentation-function must also return a non-nil,
      ;; non-string result if it's applicable for computing a documentation
      ;; string, so we set and return the new process here.
      (setq jf/eldoc-git-show-stat--process
	    (make-process
	     :name "eldoc-git-show"
	     :buffer (generate-new-buffer " *git-show-stat*")
	     :noquery t
	     :command cmd
	     :sentinel (lambda (proc event)
			 (when (eq (process-status proc) 'exit)
			   (with-current-buffer (process-buffer proc)
			     (goto-char (point-min))
			     (put-text-property (point-min)
						(line-end-position)
						'face 'bold)
			     (funcall callback (buffer-string)))))))))

  (defvar jf/magit-eldoc-last-commit nil)
  (defun jf/magit-eldoc-for-commit (callback)
    (let ((commit (magit-commit-at-point)))
      (when (and commit
		 (not (equal commit jf/magit-eldoc-last-commit)))
	(setq jf/magit-eldoc-last-commit commit)
	(jf/eldoc-git-show-stat callback commit))))

  (defun jf/magit-eldoc-setup ()
    (add-hook 'eldoc-documentation-functions
	      #'jf/magit-eldoc-for-commit nil t))

  (add-hook 'magit-status-mode-hook #'jf/magit-eldoc-setup)
  (add-hook 'magit-log-mode-hook #'jf/magit-eldoc-setup)
#+end_src