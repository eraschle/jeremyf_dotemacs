# -*- org-insert-tilde-language: emacs-lisp; -*-
#+TITLE: Emacs Experiments
#+AUTHOR: Jeremy Friesen
#+EMAIL: jeremy@jeremyfriesen.com
#+STARTUP: showall
#+OPTIONS: toc:3
#+PROPERTY: header-args:emacs-lisp :comments link

* Exploring Tree-Sitter

I was reading [[https://blog.meain.io/2022/more-treesitter-emacs/][Playing around with tree-sitter in Emacs]] and grew inspired to give it a spin.

#+begin_src emacs-lisp
  (setq jf/tree-sitter-class-like '((rust-mode . (impl_item))
				    (python-mode . (class_definition))
				    (enh-ruby-mode . (class))
				    (ruby-mode . (class))))
  (setq jf/tree-sitter-function-like '((rust-mode . (function_item))
				       (go-mode . (function_declaration method_declaration))
				       (python-mode . (function_definition))
				       (enh-ruby-mode . (method  singleton_method))))
  (defun jf/tree-sitter-thing-name (kind)
    "Get name of tree-sitter THING-KIND."
    (if tree-sitter-mode
	(let* ((node-types-list (pcase kind
				  ('class-like jf/tree-sitter-class-like)
				  ('function-like jf/tree-sitter-function-like)))
	       (node-types (alist-get major-mode node-types-list)))
	  (if node-types
	      (let ((node-at-point (car (remove-if (lambda (x) (eq nil x))
						   (seq-map (lambda (x) (tree-sitter-node-at-point x))
							    node-types)))))
		(if node-at-point
		    (let ((node-name-node-at-point (tsc-get-child-by-field node-at-point ':name)))
		      (if node-name-node-at-point
			  (tsc-node-text node-name-node-at-point)))))))))

  (defun jf/name-it ()
    (interactive)
    (message (format
	      "%s#%s"
	      (jf/tree-sitter-thing-name 'class-like)
	      (jf/tree-sitter-thing-name 'function-like)
	      )))
#+end_src
