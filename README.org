#+title: README for Dotemacs
#+AUTHOR: Jeremy Friesen
#+EMAIL: jeremy@jeremyfriesen.com
#+STARTUP: showall
#+OPTIONS: toc:3

This is my Emacs configuration repository.  It pairs with my [[https://github.com/jeremyf/dotzshrc/][dotzshrc repository]].  The [[https://github.com/jeremyf/dotzshrc/blob/main/install.rb][install.rb]] script of the dotzshrc repository uses this repository.  For implementation reasons, the =emacs.d= directory contains the init files that I link into my =$HOME/.emacs.d= directory.

For those curious, I wrote [[https://takeonrules.com/2020/10/18/why-i-chose-emacs-as-my-new-text-editor/][Why I Chose Emacs as My New Text Editor // Take on Rules]].

* The Structure

Below is the top-level directory:

#+BEGIN_EXAMPLE
  > tree -L 1
  .
  ├── README.org
  ├── emacs.d
  ├── lib
  ├── random-tables
  └── templates

  3 directories, 2 files
#+END_EXAMPLE

The files and directories:

- README.org :: This file.
- emacs.d :: A directory that contains files symlinked into =$HOME/.emacs.d= directory.
- lib :: Some scripts I’ve written to help with my Emacs configuration.
- random-tables :: Fodder for gaming, really not very well developed.
- templates :: Templates for the [[https://github.com/minad/tempel][Emacs tempel package]].

* The emacs.d Directory

There are two “primary” files to consider in =./emacs.d=:

- [[file:emacs.d/init.el][init.el]] :: The file evaluated when Emacs launches.
- early-init.el :: The file evaluated early on when Emacs launches.

** Digging Further into emacs.d

The =init.el= file requires the various files in my =emacs.d= directory.  As of <2022-11-19 Sat> I shifted from Literate configuration to a Emacs Lisp configuration.  I appreciate being able to jump to the definition and edit directly; something that wasn’t immediately obvious with Literate configuration.

Organizing concepts is an interesting challenge, as packages interact in a multi-dimensional manner.  Each of my =jf-<concept>.el= has a rudimentary commentary.

- [[file:emacs.d/abbrev_defs][abbrev_defs]] :: Common typos auto-corrected
- [[file:emacs.d/custom.el][custom.el]] :: Customizations file
- [[file:emacs.d/early-init.el][early-init.el]] :: The preamble for starting Emacs
- [[file:emacs.d/hide-comnt.el][hide-comnt.el]] :: A silly little mode to hide comments
- [[file:emacs.d/init.el][init.el]] :: The guts of Emacs initialization
- [[file:emacs.d/jf-blogging.el][jf-blogging.el]] :: Functions that I use for blogging, this houses deprecated methods.
- [[file:emacs.d/jf-coding.el][jf-coding.el]] :: Specific functions to help coding
- [[file:emacs.d/jf-communicating.el][jf-communicating.el]] :: Configuration for running Mastodon in my Emacs
- [[file:emacs.d/jf-completing.el][jf-completing.el]] :: Functions that help completing read
- [[file:emacs.d/jf-denote.el][jf-denote.el]] :: My configuration and extension of the Denote package
- [[file:emacs.d/jf-fonts-and-iconography.el][jf-fonts-and-iconography.el]] :: the look and feel of the words I type
- [[file:emacs.d/jf-formatting.el][jf-formatting.el]] ::
- [[file:emacs.d/jf-framing.el][jf-framing.el]] ::
- [[file:emacs.d/jf-gaming.el][jf-gaming.el]] ::
- [[file:emacs.d/jf-illuminating.el][jf-illuminating.el]] ::
- [[file:emacs.d/jf-launching.el][jf-launching.el]] ::
- [[file:emacs.d/jf-menus.el][jf-menus.el]] ::
- [[file:emacs.d/jf-minor-mode-maker.el][jf-minor-mode-maker.el]] ::
- [[file:emacs.d/jf-navigating.el][jf-navigating.el]] ::
- [[file:emacs.d/jf-org-mode.el][jf-org-mode.el]] :: Beloved OrgMode \ Along my path we meet and \ Now walk together
- [[file:emacs.d/jf-organizing.el][jf-organizing.el]] ::
- [[file:emacs.d/jf-project.el][jf-project.el]] :: Connective tissue for projects
- [[file:emacs.d/jf-quick-help.el][jf-quick-help.el]] ::
- [[file:emacs.d/jf-reading.el][jf-reading.el]] ::
- [[file:emacs.d/jf-utility.el][jf-utility.el]] ::
- [[file:emacs.d/jf-versioning.el][jf-versioning.el]] ::
- [[file:emacs.d/jf-windows.el][jf-windows.el]] ::
- [[file:emacs.d/jf-writing.el][jf-writing.el]] :: General writing functions

** Keybinding Prefixes

On <2023-10-20 Fri> I began refactoring some keybindings.  There were functions that got “prime” key chords but were not things I’d frequently use.  As such, I’m taking a two-fold approach:

1. Create and document keybinding prefixes
2. Rely on the =which-key= package to provide bits of guidance.

Those keybinding prefixes are as follows:

1. =C-c y= :: *Yank* something; as insert some text.
2. =C-c w= :: *Wrap* something; as in wrap the /current region/ by inserting text before and after the region.
3. =C-c f= :: *Find* something; search the file or project for something.
4. =C-c j= :: *Jump* to something; I have =C-j= bound =avy-goto-char-timer= as a quick in buffer jumper.  And =C-c C-j= as =jf/project/jump-to-task=; which provides another context

There are foundational keys that are deeply bound to muscle memory:

- =C-s= :: For =consult-line=; a mini-buffer search and go to line within file.  Akin to a feature I used in TextMate, Sublime, and Atom.
- =s-t= :: For =consult-projectile=; a very potent navigation through buffers, files, and projects.
